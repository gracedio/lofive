import { Either } from 'fp-ts/es6/Either';
import { DetailedError } from './error';
declare const ErrorStack$: unique symbol;
export declare type ErrorStack<T> = {
    _tag: typeof ErrorStack$;
    errors: DetailedError[];
    value: T;
};
export declare const empty: <T>(value: T) => ErrorStack<T>;
export declare const fromEithers: <T>(value: T) => (eithers: Either<DetailedError, any>[]) => ErrorStack<T>;
export declare const fromError: <T>(value: T) => (error: DetailedError) => ErrorStack<T>;
export declare const fromErrors: <T>(value: T) => (errors: DetailedError[]) => ErrorStack<T>;
export declare const concat: <T>(stack: ErrorStack<T>, error: DetailedError) => ErrorStack<T>;
export declare const fold: <T>(foldValueFn: (a: T, b: T) => T, initValue: T) => (stacks: ErrorStack<T>[]) => ErrorStack<T>;
export declare const value: <T>(stack: ErrorStack<T>) => T;
export declare const errors: <T>(stack: ErrorStack<T>) => DetailedError[];
export {};
