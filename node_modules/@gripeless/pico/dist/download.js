import { Future } from 'fluture';
import { err } from './error';
import { noop } from './noop';
export var download = function (url) {
    return Future(function (reject, resolve) {
        fetch(url, { cache: 'force-cache' })
            .then(function (response) {
            if (response.ok) {
                resolve(response);
            }
            else {
                reject({
                    _tag: 'HTTPError',
                    url: url,
                    status: response.status,
                    statusText: response.statusText
                });
            }
        })
            .catch(function (error) {
            reject({
                _tag: 'NetworkError',
                url: url
            });
        });
        return noop;
    });
};
export var responseToText = function (response) {
    return Future(function (reject, resolve) {
        response
            .text()
            .then(resolve)
            .catch(function (error) {
            return reject({
                error: error,
                reason: "Failed to convert response to text (" + response.url + ")"
            });
        });
        return noop;
    });
};
export var responseToBlob = function (response) {
    return Future(function (reject, resolve) {
        response
            .blob()
            .then(resolve)
            .catch(function (error) {
            return reject({
                error: error,
                reason: "Failed to convert response to text (" + response.url + ")"
            });
        });
        return noop;
    });
};
export var blobToDataURL = function (blob) {
    return Future(function (reject, resolve) {
        var reader = new FileReader();
        reader.onloadend = function () {
            return typeof reader.result === 'string'
                ? resolve(reader.result)
                : reject(err("Got invalid type when reading blob (" + typeof reader.result + ")"));
        };
        reader.onerror = function () {
            return reject(err('Failed to load data url for blob'));
        };
        reader.readAsDataURL(blob);
        return reader.abort;
    });
};
export var downloadErrorToDetailedError = function (downloadError) {
    var reason = "Failed to download resource at " + downloadError.url + " " +
        (downloadError._tag === 'NetworkError'
            ? '(Network Error, most likely a CORS issue)'
            : "(Status: " + downloadError.status + " - " + downloadError.statusText + ")");
    return {
        reason: reason,
        error: new Error(reason)
    };
};
