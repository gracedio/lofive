import { flatten, lefts, map, reduce } from 'fp-ts/es6/Array';
import { pipe } from 'fp-ts/es6/pipeable';
var ErrorStack$ = Symbol();
export var empty = function (value) { return ({
    _tag: ErrorStack$,
    errors: [],
    value: value
}); };
export var fromEithers = function (value) { return function (eithers) { return ({
    _tag: ErrorStack$,
    errors: lefts(eithers),
    value: value
}); }; };
export var fromError = function (value) { return function (error) { return fromErrors(value)([error]); }; };
export var fromErrors = function (value) { return function (errors) { return ({
    _tag: ErrorStack$,
    errors: errors,
    value: value
}); }; };
export var concat = function (stack, error) { return ({
    _tag: ErrorStack$,
    errors: stack.errors.concat(error),
    value: stack.value
}); };
export var fold = function (foldValueFn, initValue) { return function (stacks) { return ({
    _tag: ErrorStack$,
    errors: pipe(stacks, map(function (s) { return s.errors; }), flatten),
    value: pipe(stacks, map(function (s) { return s.value; }), reduce(initValue, foldValueFn))
}); }; };
export var value = function (stack) { return stack.value; };
export var errors = function (stack) { return stack.errors; };
